import os
import sys
import time
import logging
import sqlite3
import telebot
from telebot import types

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
def check_running():
    import subprocess
    result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
    processes = result.stdout
    
    bot_processes = [line for line in processes.split('\n') if 'python bot.py' in line and 'grep' not in line]
    
    if len(bot_processes) > 1:
        print("‚ùå –£–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞! –ó–∞–≤–µ—Ä—à–∞–µ–º...")
        sys.exit(1)

check_running()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID')

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (—Ö—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏)
user_data = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('fencing_applications.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS applications
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  first_name TEXT,
                  phone TEXT,
                  age INTEGER,
                  experience TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

def save_application(user_id, username, first_name, phone, age, experience):
    conn = sqlite3.connect('fencing_applications.db')
    c = conn.cursor()
    c.execute('''INSERT INTO applications 
                 (user_id, username, first_name, phone, age, experience) 
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (user_id, username, first_name, phone, age, experience))
    conn.commit()
    conn.close()
    print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {first_name}, {phone}")

def get_applications_count():
    conn = sqlite3.connect('fencing_applications.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM applications")
    count = c.fetchone()[0]
    conn.close()
    return count

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    user_data[user_id] = {'step': 'name'}
    
    welcome_text = """
ü§∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ–ª—å—è—Ç—Ç–∏–Ω—Å–∫—É—é —Ñ–µ–¥–µ—Ä–∞—Ü–∏—é —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è!

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?
"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('step') == 'name')
def process_name(message):
    user_id = message.from_user.id
    name = message.text
    
    user_data[user_id] = {
        'step': 'phone',
        'first_name': name,
        'username': message.from_user.username,
        'user_id': user_id
    }
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è: {name}")
    
    phone_text = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üìû"
    
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_contact = types.KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    button_manual = types.KeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
    keyboard.add(button_contact, button_manual)
    
    bot.send_message(message.chat.id, phone_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@bot.message_handler(content_types=['contact'])
def process_contact(message):
    user_id = message.from_user.id
    if user_data.get(user_id, {}).get('step') != 'phone':
        return
    
    phone = message.contact.phone_number
    user_data[user_id]['phone'] = phone
    user_data[user_id]['step'] = 'age'
    
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {phone}")
    
    bot.send_message(message.chat.id, "üéØ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('step') == 'phone')
def process_phone_text(message):
    user_id = message.from_user.id
    
    if message.text == "üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=types.ReplyKeyboardRemove())
        return
    
    phone = message.text
    if not any(char.isdigit() for char in phone) or len(phone) < 10:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    
    user_data[user_id]['phone'] = phone
    user_data[user_id]['step'] = 'age'
    
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é: {phone}")
    
    bot.send_message(message.chat.id, "üéØ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('step') == 'age')
def process_age(message):
    user_id = message.from_user.id
    
    try:
        age = int(message.text)
        if age < 5 or age > 70:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (5-70 –ª–µ—Ç):")
            return
        
        user_data[user_id]['age'] = age
        user_data[user_id]['step'] = 'experience'
        
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
        
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        keyboard.add(
            types.KeyboardButton("–ù–æ–≤–∏—á–æ–∫"),
            types.KeyboardButton("–ó–∞–Ω–∏–º–∞–ª—Å—è(–∞—Å—å) —Ä–∞–Ω–µ–µ"),
            types.KeyboardButton("–û–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω")
        )
        
        bot.send_message(message.chat.id, "üèÖ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏–∏?", reply_markup=keyboard)
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('step') == 'experience')
def process_experience(message):
    user_id = message.from_user.id
    experience = message.text
    user_data[user_id]['experience'] = experience
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    save_application(
        user_id=user_data[user_id]['user_id'],
        username=user_data[user_id]['username'],
        first_name=user_data[user_id]['first_name'],
        phone=user_data[user_id]['phone'],
        age=user_data[user_id]['age'],
        experience=experience
    )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message = f"""
üèÜ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í –§–ï–î–ï–†–ê–¶–ò–Æ –§–ï–•–¢–û–í–ê–ù–ò–Ø!

üë§ –ò–º—è: {user_data[user_id]['first_name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['phone']}
üéØ –í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']} –ª–µ—Ç
üìä –û–ø—ã—Ç: {experience}
üë§ Username: @{user_data[user_id]['username']}
üÜî ID: {user_data[user_id]['user_id']}

üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {get_applications_count()}
"""
    
    try:
        bot.send_message(MANAGER_CHAT_ID, manager_message)
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success_text = f"""
‚úÖ –°–ø–∞—Å–∏–±–æ, {user_data[user_id]['first_name']}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!

üèÖ –¢–æ–ª—å—è—Ç—Ç–∏–Ω—Å–∫–∞—è —Ñ–µ–¥–µ—Ä–∞—Ü–∏—è —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è
üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

–î–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start
"""
    
    bot.send_message(message.chat.id, success_text, reply_markup=types.ReplyKeyboardRemove())
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(user_id, None)
    print("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def unknown_message(message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    else:
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    print("ü§∫ –ë–æ—Ç –¢–æ–ª—å—è—Ç—Ç–∏–Ω—Å–∫–æ–π —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏ —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()

