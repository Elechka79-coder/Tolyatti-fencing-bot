import logging
import sqlite3
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (Application, CommandHandler, MessageHandler, 
                         filters, ContextTypes, ConversationHandler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, AGE, EXPERIENCE = range(4)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('fencing_applications.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS applications
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  first_name TEXT,
                  phone TEXT,
                  age INTEGER,
                  experience TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

def save_application(user_id, username, first_name, phone, age, experience):
    conn = sqlite3.connect('fencing_applications.db')
    c = conn.cursor()
    c.execute('''INSERT INTO applications 
                 (user_id, username, first_name, phone, age, experience) 
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (user_id, username, first_name, phone, age, experience))
    conn.commit()
    conn.close()
    print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {first_name}, {phone}")

def get_applications_count():
    conn = sqlite3.connect('fencing_applications.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM applications")
    count = c.fetchone()[0]
    conn.close()
    return count

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
    
    welcome_text = """
ü§∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ–ª—å—è—Ç—Ç–∏–Ω—Å–∫—É—é —Ñ–µ–¥–µ—Ä–∞—Ü–∏—é —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è!

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?
"""
    
    await update.message.reply_text(welcome_text, reply_markup=ReplyKeyboardRemove())
    return NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data['first_name'] = name
    context.user_data['username'] = update.message.from_user.username
    context.user_data['user_id'] = update.message.from_user.id
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è: {name}")
    
    phone_text = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üìû"
    
    keyboard = [
        [KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
        [KeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(phone_text, reply_markup=reply_markup)
    return PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def process_contact_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    phone = contact.phone_number
    context.user_data['phone'] = phone
    
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {phone}")
    
    await update.message.reply_text("üéØ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    return AGE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
async def process_manual_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def process_phone_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if not any(char.isdigit() for char in phone) or len(phone) < 10:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return PHONE
    
    context.user_data['phone'] = phone
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é: {phone}")
    
    await update.message.reply_text("üéØ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return AGE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def process_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 5 or age > 70:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (5-70 –ª–µ—Ç):")
            return AGE
        
        context.user_data['age'] = age
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
        
        keyboard = [
            [KeyboardButton("–ù–æ–≤–∏—á–æ–∫")],
            [KeyboardButton("–ó–∞–Ω–∏–º–∞–ª—Å—è(–∞—Å—å) —Ä–∞–Ω–µ–µ")],
            [KeyboardButton("–û–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("üèÖ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏–∏?", reply_markup=reply_markup)
        return EXPERIENCE
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:")
        return AGE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def process_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    experience = update.message.text
    context.user_data['experience'] = experience
    
    save_application(
        user_id=context.user_data['user_id'],
        username=context.user_data['username'],
        first_name=context.user_data['first_name'],
        phone=context.user_data['phone'],
        age=context.user_data['age'],
        experience=experience
    )
    
    manager_message = f"""
üèÜ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í –§–ï–î–ï–†–ê–¶–ò–Æ –§–ï–•–¢–û–í–ê–ù–ò–Ø!

üë§ –ò–º—è: {context.user_data['first_name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}
üéØ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']} –ª–µ—Ç
üìä –û–ø—ã—Ç: {experience}
üë§ Username: @{context.user_data['username']}
üÜî ID: {context.user_data['user_id']}

üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {get_applications_count()}
"""
    
    try:
        await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=manager_message)
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
    
    success_text = f"""
‚úÖ –°–ø–∞—Å–∏–±–æ, {context.user_data['first_name']}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!

üèÖ –¢–æ–ª—å—è—Ç—Ç–∏–Ω—Å–∫–∞—è —Ñ–µ–¥–µ—Ä–∞—Ü–∏—è —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è
üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

–î–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start
"""
    
    await update.message.reply_text(success_text, reply_markup=ReplyKeyboardRemove())
    print("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)],
            PHONE: [
                MessageHandler(filters.CONTACT, process_contact_button),
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone_text)
            ],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_age)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_experience)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT, unknown))
    
    print("ü§∫ –ë–æ—Ç –¢–æ–ª—å—è—Ç—Ç–∏–Ω—Å–∫–æ–π —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏ —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
